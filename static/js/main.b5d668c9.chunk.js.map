{"version":3,"sources":["Todolist.module.css","components/AddInformations.tsx","components/EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AddInformations","props","useState","title","setTitle","error","setError","errorClass","errorMessage","style","color","addItem","trimmedTitle","trim","value","onChange","e","currentTarget","onKeyPress","key","className","onClick","EditableSpan","editMode","setEditMode","setValue","onDoubleClick","changeTitle","autoFocus","onBlur","TodoList","getBtnClass","filter","tasksJSX","tasks","map","task","isDone","removeTask","id","type","checked","changeTaskStatus","changeTaskTitle","s","border","removeTotoList","changeTitleTD","console","log","addTask","changeFilter","App","todoListID_1","v1","todoListID_2","todoList","setTodoList","setTasks","todoListID","filt","m","taskID","copy","f","newTaskTitle","newTask","copyTasks","todolistComponents","tasksForRender","t","newTD","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b5d668c9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Todolist_error__3Ta5F\",\"errorMessage\":\"Todolist_errorMessage__3UksW\",\"activeFilter\":\"Todolist_activeFilter__1pt-n\",\"border\":\"Todolist_border__278lJ\"};","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype AddInformationsPropsType = {\r\n    addItem: (value: string) => void\r\n}\r\n\r\nexport const AddInformations = (props: AddInformationsPropsType) => {\r\n\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const errorClass = error ? \"error\" : \"\";\r\n    const errorMessage = <div style={{color: \"red\"}}>Title is required!</div>\r\n\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onKeyPressAdd = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {addItem();}\r\n    }\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n\r\n    return (\r\n<div>\r\n    <input\r\n        value={title}\r\n        onChange={changeTitle}\r\n        onKeyPress={onKeyPressAdd}\r\n        className={errorClass}\r\n\r\n    />\r\n    <button onClick={addItem}>+</button>\r\n    {error && errorMessage}\r\n</div>\r\n    )\r\n}","import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (value: string) => void\r\n\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState(true)\r\n    const [value, setValue] = useState(props.title)\r\n\r\n    const onClick = () => setEditMode(true)\r\n    const offClick = () => setEditMode(false)\r\n\r\n    const inputValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n        props.changeTitle(value)\r\n    }\r\n    const onChangeInput = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            props.changeTitle(value)\r\n            setEditMode(true)\r\n        } else {\r\n            return\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <span\r\n                onDoubleClick={offClick}>\r\n                {props.title}\r\n            </span> :\r\n\r\n            <input\r\n                value={value}\r\n                onKeyPress={onChangeInput}\r\n                autoFocus={true}\r\n                onBlur={onClick}\r\n                onChange={inputValue}\r\n            />\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, MouseEvent, useState} from 'react';\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport s from './Todolist.module.css'\r\nimport {AddInformations} from \"./components/AddInformations\";\r\nimport {EditableSpan} from \"./components/EditableSpan\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeFilter: (filter: FilterValuesType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    removeTotoList: (todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n    changeTitleTD: (title: string, todoListID: string) => void\r\n}\r\n\r\nfunction TodoList(props: PropsType) {\r\n\r\n    const addTask = (value: string) => {\r\n            props.addTask(value, props.id)\r\n    }\r\n\r\n    const setAllFilterValue = () => props.changeFilter(\"all\", props.id)\r\n    const setActiveFilterValue = () => props.changeFilter(\"active\", props.id)\r\n    const setCompletedFilterValue = () => props.changeFilter(\"completed\", props.id)\r\n    const getBtnClass = (filter: FilterValuesType) => props.filter === filter ? \"active\" : \"\";\r\n\r\n\r\n    const tasksJSX = props.tasks.map(task => {\r\n        const getClasses = () => task.isDone ? \"is-done\" : \"\";\r\n        const changeStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n            props.changeTaskStatus(task.id, e.currentTarget.checked, props.id)\r\n        const removeTask = () => props.removeTask(task.id, props.id)\r\n        const changeTitle = (value: string) => {\r\n            props.changeTaskTitle(task.id, value, props.id)\r\n        }\r\n        return (\r\n\r\n            <li key={task.id} className={getClasses()}>\r\n                <button onClick={removeTask}>x</button>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={task.isDone}\r\n                    onChange={changeStatus}\r\n                />\r\n                <EditableSpan\r\n                    title={task.title}\r\n                    changeTitle={changeTitle}\r\n                />\r\n            </li>\r\n        )\r\n    })\r\n    const changeTDTitle = (value: string) => {\r\n        props.changeTitleTD(value, props.id)\r\n        console.log(value)}\r\n    return (\r\n        <div className={s.border}>\r\n            <button onClick={() => props.removeTotoList(props.id)}>X</button>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTDTitle}/>\r\n            </h3>\r\n            <div>\r\n                <AddInformations addItem={addTask}/>\r\n            </div>\r\n            <ul>\r\n                {tasksJSX}\r\n            </ul>\r\n            <div>\r\n                <button\r\n                    className={getBtnClass(\"all\")}\r\n                    onClick={setAllFilterValue}>All\r\n                </button>\r\n                <button\r\n                    className={getBtnClass(\"active\")}\r\n                    onClick={setActiveFilterValue}>Active\r\n                </button>\r\n                <button\r\n                    className={getBtnClass(\"completed\")}\r\n                    onClick={setCompletedFilterValue}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./Todolist\";\r\nimport {v1} from \"uuid\";\r\nimport {AddInformations} from \"./components/AddInformations\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TaskStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\nfunction App() {\r\n    const todoListID_1 = v1()\r\n    const todoListID_2 = v1()\r\n    const [todoList, setTodoList] = useState<Array<TodoListType>>([\r\n        {id: todoListID_1, title: \"What to learn\", filter: 'all'},\r\n        {id: todoListID_2, title: \"What to by\", filter: 'all'},\r\n    ])\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID_1]: [\r\n            {id: v1(), title: \"HTML\", isDone: true},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"REACT\", isDone: false},\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: \"HTML\", isDone: true},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"REACT\", isDone: false},\r\n        ]\r\n    })\r\n\r\n    //BLL:\r\n    const changeFilter = (filter: FilterValuesType, todoListID: string) => {\r\n        const filt = todoList.map(m => m.id === todoListID ? {...m, filter} : m)\r\n        setTodoList(filt)\r\n    }\r\n    const changeTitleTD = (title: string, todoListID: string) => {\r\n        const filt = todoList.map(m => m.id === todoListID ? {...m, title} : m)\r\n        setTodoList(filt)\r\n    }\r\n\r\n    const removeTask = (taskID: string, todoListID: string) => {\r\n        const copy = {...tasks}\r\n        copy[todoListID] = tasks[todoListID].filter(f => f.id !== taskID)\r\n        setTasks(copy)\r\n    }\r\n    const addTask = (newTaskTitle: string, todoListID: string) => {\r\n        const newTask: TaskType = {id: v1(), title: newTaskTitle, isDone: false}\r\n        const copy = {...tasks}\r\n        copy[todoListID] = [newTask, ...tasks[todoListID]]\r\n        setTasks(copy)\r\n    }\r\n    const changeTaskStatus = (taskID: string, isDone: boolean, todoListID: string) => {\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = tasks[todoListID].map(m => m.id === taskID ? {...m, isDone} : m)\r\n        setTasks(copyTasks)\r\n    }\r\n        const changeTaskTitle = (taskID: string, title: string, todoListID: string) => {\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = tasks[todoListID].map(m => m.id === taskID ? {...m, title} : m)\r\n        setTasks(copyTasks)\r\n    }\r\n\r\n    const removeTotoList = (todoListID: string) => {\r\n        setTodoList(todoList.filter(f => f.id !== todoListID))\r\n    }\r\n    const addTodo = (title: string) => {\r\n        const ID = v1()\r\n        const newTD: TodoListType = {id: ID, title: title, filter: 'all'}\r\n        setTodoList([...todoList, newTD])\r\n        setTasks({...tasks, [newTD.id]: []})\r\n    }\r\n\r\n\r\n    const todolistComponents = todoList.map(m => {\r\n\r\n        let tasksForRender = tasks[m.id]\r\n        if (m.filter === \"active\") {\r\n            tasksForRender = tasksForRender.filter(t => !t.isDone)\r\n        }\r\n        if (m.filter === \"completed\") {\r\n            tasksForRender = tasksForRender.filter(t => t.isDone)\r\n        }\r\n        return (\r\n            <TodoList\r\n                key={m.id}\r\n                id={m.id}\r\n                title={m.title}\r\n                tasks={tasksForRender}\r\n                filter={m.filter}\r\n                addTask={addTask}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                changeTaskStatus={changeTaskStatus}\r\n                removeTotoList={removeTotoList}\r\n                changeTaskTitle={changeTaskTitle}\r\n                changeTitleTD={changeTitleTD}\r\n            />\r\n        )\r\n    })\r\n\r\n    //UI:\r\n    return (\r\n        <div className=\"App\">\r\n            <AddInformations addItem={addTodo}/>\r\n            {todolistComponents}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}