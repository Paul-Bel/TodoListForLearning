{"version":3,"sources":["Todolist.module.css","components/AddInformations.tsx","components/EditableSpan.tsx","components/Todolist.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AddInformations","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","value","onChange","e","currentTarget","onKeyPress","key","label","variant","size","color","IconButton","onClick","Queue","EditableSpan","editMode","setEditMode","setValue","className","s","onDoubleClick","changeTitle","autoFocus","onBlur","TodoList","tasksJSX","tasks","map","task","ListItem","tasksDIV","Checkbox","checked","isDone","changeTaskStatus","id","changeTaskTitle","removeTask","icon","DeleteForeverTwoTone","removeTotoList","Delete","changeTitleTD","console","log","addTask","ButtonGroup","disableElevation","Button","filter","changeFilter","buttons","App","todoListID_1","v1","todoListID_2","todoList","setTodoList","setTasks","todoListID","filt","m","taskID","copy","f","newTaskTitle","newTask","copyTasks","todolistComponents","tasksForRender","t","Grid","item","Paper","elevation","style","padding","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","newTD","width","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.84340adb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Todolist_error__3Ta5F\",\"errorMessage\":\"Todolist_errorMessage__3UksW\",\"border\":\"Todolist_border__278lJ\",\"tasks\":\"Todolist_tasks__3Ym3e\",\"task\":\"Todolist_task__2Xi9m\",\"tasksDIV\":\"Todolist_tasksDIV__FhEay\",\"icon\":\"Todolist_icon__AxtXC\",\"title\":\"Todolist_title__PILsY\"};","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport s from './../Todolist.module.css'\r\nimport {Backdrop, Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddCircleOutlineSharp, AddLocationSharp, Queue} from \"@material-ui/icons\";\r\n\r\ntype AddInformationsPropsType = {\r\n    addItem: (value: string) => void\r\n}\r\n\r\nexport const AddInformations = (props: AddInformationsPropsType) => {\r\n\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const errorClass = error ? \"error\" : \"\";\r\n    const errorMessage = <div style={{color: \"darkred\"}}>Title is required!</div>\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onKeyPressAdd = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAdd}\r\n                label={\"enter your text\"}\r\n                variant={'standard'}\r\n                size={'small'}\r\n                color={'primary'}\r\n                error={error}\r\n            />\r\n            <IconButton onClick={addItem}>\r\n          <Queue/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport s from './../Todolist.module.css'\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (value: string) => void\r\n\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState(true)\r\n    const [value, setValue] = useState(props.title)\r\n\r\n    const onClick = () => setEditMode(true)\r\n    const offClick = () => setEditMode(false)\r\n\r\n    const inputValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n        props.changeTitle(value)\r\n    }\r\n    const onChangeInput = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            props.changeTitle(value)\r\n            setEditMode(true)\r\n        } else {\r\n            return\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <span\r\n                className={s.title}\r\n                onDoubleClick={offClick}>\r\n                {props.title}\r\n            </span> :\r\n            <span>\r\n            <TextField\r\n                value={value}\r\n                onKeyPress={onChangeInput}\r\n                autoFocus={true}\r\n                onBlur={onClick}\r\n                onChange={inputValue}\r\n                variant={'standard'}\r\n            />\r\n     </span>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport {AddInformations} from \"./AddInformations\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, ButtonGroup, Checkbox, IconButton, ListItem, Typography} from \"@material-ui/core\";\r\nimport s from './../Todolist.module.css'\r\nimport {Delete, DeleteForeverTwoTone} from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeFilter: (filter: FilterValuesType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    removeTotoList: (todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n    changeTitleTD: (title: string, todoListID: string) => void\r\n}\r\n\r\nfunction TodoList(props: PropsType) {\r\n\r\n    const addTask = (value: string) => {\r\n        props.addTask(value, props.id)\r\n    }\r\n\r\n    const setAllFilterValue = () => props.changeFilter(\"all\", props.id)\r\n    const setActiveFilterValue = () => props.changeFilter(\"active\", props.id)\r\n    const setCompletedFilterValue = () => props.changeFilter(\"completed\", props.id)\r\n    const getBtnClass = (filter: FilterValuesType) => props.filter === filter ? \"active\" : \"\";\r\n\r\n\r\n    const tasksJSX = props.tasks.map(task => {\r\n        const changeStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n            props.changeTaskStatus(task.id, e.currentTarget.checked, props.id)\r\n        const removeTask = () => props.removeTask(task.id, props.id)\r\n        const changeTitle = (value: string) => {\r\n            props.changeTaskTitle(task.id, value, props.id)\r\n        }\r\n        return (\r\n\r\n            <ListItem\r\n                key={task.id}\r\n                className={s.task}\r\n            >\r\n\r\n                <div className={s.tasksDIV}>\r\n                    <Checkbox\r\n                        checked={task.isDone}\r\n                        onChange={changeStatus}\r\n                    />\r\n                    <EditableSpan\r\n                        title={task.title}\r\n                        changeTitle={changeTitle}\r\n                    />\r\n                </div>\r\n\r\n                <IconButton onClick={removeTask} className={s.icon}>\r\n                    <DeleteForeverTwoTone/>\r\n                </IconButton>\r\n\r\n            </ListItem>\r\n\r\n        )\r\n    })\r\n    const changeTDTitle = (value: string) => {\r\n        props.changeTitleTD(value, props.id)\r\n        console.log(value)\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            <h3>\r\n                <IconButton\r\n                    color={'primary'}\r\n                    onClick={() => props.removeTotoList(props.id)}\r\n                >\r\n                    <Delete/>\r\n                </IconButton>\r\n\r\n                <EditableSpan title={props.title} changeTitle={changeTDTitle}/>\r\n\r\n            </h3>\r\n            <div>\r\n                <AddInformations addItem={addTask}/>\r\n            </div>\r\n\r\n\r\n            <ul className={s.tasks}>\r\n                {tasksJSX}\r\n            </ul>\r\n            <div>\r\n                <ButtonGroup\r\n                    variant={\"contained\"}\r\n                    size={\"small\"}\r\n                    disableElevation\r\n                >\r\n                    <Button\r\n                        color={props.filter === \"all\" ? \"secondary\" : \"primary\"}\r\n                        onClick={setAllFilterValue}\r\n                        className={s.buttons}\r\n                    >All\r\n                    </Button>\r\n                    <Button\r\n                        color={props.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                        onClick={setActiveFilterValue}\r\n                        className={s.buttons}\r\n                    >Active\r\n                    </Button>\r\n                    <Button\r\n                        color={props.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                        onClick={setCompletedFilterValue}\r\n                    >Completed\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport '../App.css';\r\nimport TodoList from \"./Todolist\";\r\nimport {v1} from \"uuid\";\r\nimport {AddInformations} from \"./AddInformations\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport s from \"../Todolist.module.css\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TaskStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n    const todoListID_1 = v1()\r\n    const todoListID_2 = v1()\r\n    const [todoList, setTodoList] = useState<Array<TodoListType>>([\r\n        {id: todoListID_1, title: \"What to learn\", filter: 'all'},\r\n        {id: todoListID_2, title: \"What to by\", filter: 'all'},\r\n    ])\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID_1]: [\r\n            {id: v1(), title: \"HTML\", isDone: false},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"REACT\", isDone: false},\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: \"Bread\", isDone: true},\r\n            {id: v1(), title: \"Milk\", isDone: false},\r\n            {id: v1(), title: \"Coffee\", isDone: false},\r\n        ]\r\n    })\r\n\r\n    //BLL:\r\n    const changeFilter = (filter: FilterValuesType, todoListID: string) => {\r\n        const filt = todoList.map(m => m.id === todoListID ? {...m, filter} : m)\r\n        setTodoList(filt)\r\n    }\r\n    const changeTitleTD = (title: string, todoListID: string) => {\r\n        const filt = todoList.map(m => m.id === todoListID ? {...m, title} : m)\r\n        setTodoList(filt)\r\n    }\r\n\r\n    const removeTask = (taskID: string, todoListID: string) => {\r\n        const copy = {...tasks}\r\n        copy[todoListID] = tasks[todoListID].filter(f => f.id !== taskID)\r\n        setTasks(copy)\r\n    }\r\n    const addTask = (newTaskTitle: string, todoListID: string) => {\r\n        const newTask: TaskType = {id: v1(), title: newTaskTitle, isDone: false}\r\n        const copy = {...tasks}\r\n        copy[todoListID] = [newTask, ...tasks[todoListID]]\r\n        setTasks(copy)\r\n    }\r\n    const changeTaskStatus = (taskID: string, isDone: boolean, todoListID: string) => {\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = tasks[todoListID].map(m => m.id === taskID ? {...m, isDone} : m)\r\n        setTasks(copyTasks)\r\n    }\r\n    const changeTaskTitle = (taskID: string, title: string, todoListID: string) => {\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = tasks[todoListID].map(m => m.id === taskID ? {...m, title} : m)\r\n        setTasks(copyTasks)\r\n    }\r\n    const removeTotoList = (todoListID: string) => {\r\n        setTodoList(todoList.filter(f => f.id !== todoListID))\r\n    }\r\n    const addTodo = (title: string) => {\r\n        const ID = v1()\r\n        const newTD: TodoListType = {id: ID, title: title, filter: 'all'}\r\n        setTodoList([...todoList, newTD])\r\n        setTasks({...tasks, [newTD.id]: []})\r\n    }\r\n    const todolistComponents = todoList.map(m => {\r\n        let tasksForRender = tasks[m.id]\r\n        if (m.filter === \"active\") {\r\n            tasksForRender = tasksForRender.filter(t => !t.isDone)\r\n        }\r\n        if (m.filter === \"completed\") {\r\n            tasksForRender = tasksForRender.filter(t => t.isDone)\r\n        }\r\n        return (\r\n            <Grid\r\n                key={m.id}\r\n                item\r\n            >\r\n\r\n                <Paper\r\n                    elevation={7}\r\n                    style={{padding: \"20px\"}}\r\n                    // className={s.border}\r\n                >\r\n                    <TodoList\r\n                        id={m.id}\r\n                        title={m.title}\r\n                        tasks={tasksForRender}\r\n                        filter={m.filter}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTotoList={removeTotoList}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTitleTD={changeTitleTD}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    //UI:\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <AppBar position=\"static\">\r\n                <Toolbar\r\n                    style={{justifyContent: \"space-between\"}}\r\n                >\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"secondary\" variant={\"outlined\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n\r\n\r\n\r\n            <Container\r\n                fixed\r\n            >\r\n                <Grid\r\n                    container\r\n                    style={{padding: '20px'}}\r\n                >\r\n\r\n                    <AddInformations addItem={addTodo}/>\r\n                </Grid>\r\n\r\n                <Grid\r\n                    style={{width: '1280px'}}\r\n                    container\r\n                    spacing={3}\r\n                >\r\n                    {todolistComponents}\r\n                </Grid>\r\n\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}