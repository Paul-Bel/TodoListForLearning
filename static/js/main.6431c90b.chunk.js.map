{"version":3,"sources":["Todolist.module.css","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","TodoList","props","useState","title","setTitle","error","setError","addTask","trimmedTitle","trim","id","getBtnClass","filter","tasksJSX","tasks","map","task","className","isDone","onClick","removeTask","type","checked","onChange","e","changeTaskStatus","currentTarget","errorClass","errorMessage","style","color","s","border","removeTotoList","value","onKeyPress","key","changeFilter","App","todoListID_1","v1","todoListID_2","todoList","setTodoList","setTasks","todoListID","filt","m","taskID","copy","f","newTaskTitle","newTask","copyTasks","addTodo","newTD","todolistComponents","tasksForRender","t","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6431c90b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Todolist_error__3Ta5F\",\"errorMessage\":\"Todolist_errorMessage__3UksW\",\"activeFilter\":\"Todolist_activeFilter__1pt-n\",\"border\":\"Todolist_border__278lJ\"};","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport s from './Todolist.module.css'\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeFilter: (filter: FilterValuesType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    removeTotoList: (todoListID: string) => void\r\n    addTodo: () => void\r\n}\r\n\r\nfunction TodoList(props: PropsType) {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const addTask = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addTask(trimmedTitle, props.id)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addTask();\r\n        }\r\n    }\r\n    const setAllFilterValue = () => props.changeFilter(\"all\", props.id)\r\n    const setActiveFilterValue = () => props.changeFilter(\"active\", props.id)\r\n    const setCompletedFilterValue = () => props.changeFilter(\"completed\", props.id)\r\n    const getBtnClass = (filter: FilterValuesType) => props.filter === filter ? \"active\" : \"\";\r\n\r\n    const tasksJSX = props.tasks.map(task => {\r\n        const getClasses = () => task.isDone ? \"is-done\" : \"\";\r\n        const changeStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n            props.changeTaskStatus(task.id, e.currentTarget.checked, props.id)\r\n        const removeTask = () => props.removeTask(task.id, props.id)\r\n        return (\r\n            <li key={task.id} className={getClasses()}>\r\n                <button onClick={removeTask}>x</button>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={task.isDone}\r\n                    onChange={changeStatus}\r\n                />\r\n                <span>{task.title}</span>\r\n            </li>\r\n        )\r\n    })\r\n    const errorClass = error ? \"error\" : \"\";\r\n    const errorMessage = <div style={{color: \"red\"}}>Title is required!</div>\r\n\r\n    return (\r\n        <div className={s.border}>\r\n            <button onClick={() => props.removeTotoList(props.id)}>X</button>\r\n            <h3>{props.title}\r\n            </h3>\r\n            <div>\r\n                <input\r\n                    value={title}\r\n                    onChange={changeTitle}\r\n                    onKeyPress={onKeyPressAddTask}\r\n                    className={errorClass}\r\n                />\r\n                <button onClick={addTask}>+</button>\r\n                {error && errorMessage}\r\n            </div>\r\n            <ul>\r\n                {tasksJSX}\r\n            </ul>\r\n            <div>\r\n                <button\r\n                    className={getBtnClass(\"all\")}\r\n                    onClick={setAllFilterValue}>All\r\n                </button>\r\n                <button\r\n                    className={getBtnClass(\"active\")}\r\n                    onClick={setActiveFilterValue}>Active\r\n                </button>\r\n                <button\r\n                    className={getBtnClass(\"completed\")}\r\n                    onClick={setCompletedFilterValue}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./Todolist\";\r\nimport {v1} from \"uuid\";\r\n\r\n// Create\r\n// Read\r\n// Update\r\n// Delete\r\n// CRUD\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TaskStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n    const todoListID_1 = v1()\r\n    const todoListID_2 = v1()\r\n\r\n    const [todoList, setTodoList] = useState<Array<TodoListType>>([\r\n        {id: todoListID_1, title: \"What to learn\", filter: 'all'},\r\n        {id: todoListID_2, title: \"What to by\", filter: 'all'},\r\n    ])\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID_1]: [\r\n            {id: v1(), title: \"HTML\", isDone: true},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"REACT\", isDone: false},\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: \"HTML\", isDone: true},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"REACT\", isDone: false},\r\n        ]\r\n    })\r\n\r\n    //BLL:\r\n    const changeFilter = (filter: FilterValuesType, todoListID: string) => {\r\n        const filt = todoList.map(m => m.id === todoListID ? {...m, filter} : m)\r\n        setTodoList(filt)\r\n    }\r\n    const removeTask = (taskID: string, todoListID: string) => {\r\n        const copy = {...tasks}\r\n        copy[todoListID] = tasks[todoListID].filter(f => f.id !== taskID)\r\n        setTasks(copy)\r\n    }\r\n    const addTask = (newTaskTitle: string, todoListID: string) => {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title: newTaskTitle,\r\n            isDone: false\r\n        }\r\n        const copy = {...tasks}\r\n        copy[todoListID] = [newTask, ...tasks[todoListID]]\r\n        setTasks(copy)\r\n    }\r\n    const changeTaskStatus = (taskID: string, isDone: boolean, todoListID: string) => {\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = tasks[todoListID].map(m => m.id === taskID ? {...m, isDone} : m)\r\n        setTasks(copyTasks)\r\n    }\r\n    const removeTotoList = (todoListID: string) => {\r\n        setTodoList(todoList.filter(f => f.id !== todoListID))\r\n    }\r\n    const addTodo = () => {\r\n        const ID = v1()\r\n        const newTD: TodoListType = {id: ID, title: \"New TD\", filter: 'all'}\r\n        setTodoList([...todoList, newTD])\r\n        setTasks({...tasks, [newTD.id]: []})\r\n    }\r\n\r\n\r\n    const todolistComponents = todoList.map(m => {\r\n\r\n        let tasksForRender = tasks[m.id]\r\n        if (m.filter === \"active\") {\r\n            tasksForRender = tasksForRender.filter(t => !t.isDone)\r\n        }\r\n        if (m.filter === \"completed\") {\r\n            tasksForRender = tasksForRender.filter(t => t.isDone)\r\n        }\r\n        return (\r\n            <TodoList\r\n                key={m.id}\r\n                id={m.id}\r\n                title={m.title}\r\n                tasks={tasksForRender}\r\n                filter={m.filter}\r\n                addTask={addTask}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                changeTaskStatus={changeTaskStatus}\r\n                removeTotoList={removeTotoList}\r\n                addTodo={addTodo}\r\n            />\r\n        )\r\n    })\r\n\r\n    //UI:\r\n    return (\r\n        <div className=\"App\">\r\n            <button className={\"addTD\"} onClick={addTodo}>New TodoList</button>\r\n            {todolistComponents}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}